// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package service is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		StructureRequest
		Element
		StructureResponse
		ChecksumRequest
		ChecksumResponse
		Checksum
		UploadResponse
		Block
*/
package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StructureRequest struct {
	Sep      string     `protobuf:"bytes,1,opt,name=sep,proto3" json:"sep,omitempty"`
	Elements []*Element `protobuf:"bytes,2,rep,name=elements" json:"elements,omitempty"`
}

func (m *StructureRequest) Reset()                    { *m = StructureRequest{} }
func (m *StructureRequest) String() string            { return proto.CompactTextString(m) }
func (*StructureRequest) ProtoMessage()               {}
func (*StructureRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *StructureRequest) GetSep() string {
	if m != nil {
		return m.Sep
	}
	return ""
}

func (m *StructureRequest) GetElements() []*Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

type Element struct {
	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IsDir bool   `protobuf:"varint,2,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
}

func (m *Element) Reset()                    { *m = Element{} }
func (m *Element) String() string            { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()               {}
func (*Element) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *Element) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Element) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type StructureResponse struct {
}

func (m *StructureResponse) Reset()                    { *m = StructureResponse{} }
func (m *StructureResponse) String() string            { return proto.CompactTextString(m) }
func (*StructureResponse) ProtoMessage()               {}
func (*StructureResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type ChecksumRequest struct {
	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Checksum  string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	BlockSize uint32 `protobuf:"varint,3,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
}

func (m *ChecksumRequest) Reset()                    { *m = ChecksumRequest{} }
func (m *ChecksumRequest) String() string            { return proto.CompactTextString(m) }
func (*ChecksumRequest) ProtoMessage()               {}
func (*ChecksumRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *ChecksumRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChecksumRequest) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ChecksumRequest) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

type ChecksumResponse struct {
	Path      string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Checksum  string      `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Checksums []*Checksum `protobuf:"bytes,3,rep,name=checksums" json:"checksums,omitempty"`
}

func (m *ChecksumResponse) Reset()                    { *m = ChecksumResponse{} }
func (m *ChecksumResponse) String() string            { return proto.CompactTextString(m) }
func (*ChecksumResponse) ProtoMessage()               {}
func (*ChecksumResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *ChecksumResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChecksumResponse) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *ChecksumResponse) GetChecksums() []*Checksum {
	if m != nil {
		return m.Checksums
	}
	return nil
}

type Checksum struct {
	Weak   uint32 `protobuf:"varint,1,opt,name=weak,proto3" json:"weak,omitempty"`
	Strong string `protobuf:"bytes,2,opt,name=strong,proto3" json:"strong,omitempty"`
}

func (m *Checksum) Reset()                    { *m = Checksum{} }
func (m *Checksum) String() string            { return proto.CompactTextString(m) }
func (*Checksum) ProtoMessage()               {}
func (*Checksum) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *Checksum) GetWeak() uint32 {
	if m != nil {
		return m.Weak
	}
	return 0
}

func (m *Checksum) GetStrong() string {
	if m != nil {
		return m.Strong
	}
	return ""
}

type UploadResponse struct {
}

func (m *UploadResponse) Reset()                    { *m = UploadResponse{} }
func (m *UploadResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()               {}
func (*UploadResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

type Block struct {
	Reference bool   `protobuf:"varint,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Number    uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Payload   []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *Block) GetReference() bool {
	if m != nil {
		return m.Reference
	}
	return false
}

func (m *Block) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*StructureRequest)(nil), "service.StructureRequest")
	proto.RegisterType((*Element)(nil), "service.Element")
	proto.RegisterType((*StructureResponse)(nil), "service.StructureResponse")
	proto.RegisterType((*ChecksumRequest)(nil), "service.ChecksumRequest")
	proto.RegisterType((*ChecksumResponse)(nil), "service.ChecksumResponse")
	proto.RegisterType((*Checksum)(nil), "service.Checksum")
	proto.RegisterType((*UploadResponse)(nil), "service.UploadResponse")
	proto.RegisterType((*Block)(nil), "service.Block")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DirSync service

type DirSyncClient interface {
	SyncStructure(ctx context.Context, in *StructureRequest, opts ...grpc.CallOption) (*StructureResponse, error)
	GetChecksum(ctx context.Context, in *ChecksumRequest, opts ...grpc.CallOption) (*ChecksumResponse, error)
	UploadBlocks(ctx context.Context, opts ...grpc.CallOption) (DirSync_UploadBlocksClient, error)
}

type dirSyncClient struct {
	cc *grpc.ClientConn
}

func NewDirSyncClient(cc *grpc.ClientConn) DirSyncClient {
	return &dirSyncClient{cc}
}

func (c *dirSyncClient) SyncStructure(ctx context.Context, in *StructureRequest, opts ...grpc.CallOption) (*StructureResponse, error) {
	out := new(StructureResponse)
	err := grpc.Invoke(ctx, "/service.DirSync/SyncStructure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirSyncClient) GetChecksum(ctx context.Context, in *ChecksumRequest, opts ...grpc.CallOption) (*ChecksumResponse, error) {
	out := new(ChecksumResponse)
	err := grpc.Invoke(ctx, "/service.DirSync/GetChecksum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirSyncClient) UploadBlocks(ctx context.Context, opts ...grpc.CallOption) (DirSync_UploadBlocksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DirSync_serviceDesc.Streams[0], c.cc, "/service.DirSync/UploadBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dirSyncUploadBlocksClient{stream}
	return x, nil
}

type DirSync_UploadBlocksClient interface {
	Send(*Block) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type dirSyncUploadBlocksClient struct {
	grpc.ClientStream
}

func (x *dirSyncUploadBlocksClient) Send(m *Block) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dirSyncUploadBlocksClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DirSync service

type DirSyncServer interface {
	SyncStructure(context.Context, *StructureRequest) (*StructureResponse, error)
	GetChecksum(context.Context, *ChecksumRequest) (*ChecksumResponse, error)
	UploadBlocks(DirSync_UploadBlocksServer) error
}

func RegisterDirSyncServer(s *grpc.Server, srv DirSyncServer) {
	s.RegisterService(&_DirSync_serviceDesc, srv)
}

func _DirSync_SyncStructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirSyncServer).SyncStructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DirSync/SyncStructure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirSyncServer).SyncStructure(ctx, req.(*StructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirSync_GetChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirSyncServer).GetChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DirSync/GetChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirSyncServer).GetChecksum(ctx, req.(*ChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirSync_UploadBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirSyncServer).UploadBlocks(&dirSyncUploadBlocksServer{stream})
}

type DirSync_UploadBlocksServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*Block, error)
	grpc.ServerStream
}

type dirSyncUploadBlocksServer struct {
	grpc.ServerStream
}

func (x *dirSyncUploadBlocksServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dirSyncUploadBlocksServer) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DirSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.DirSync",
	HandlerType: (*DirSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncStructure",
			Handler:    _DirSync_SyncStructure_Handler,
		},
		{
			MethodName: "GetChecksum",
			Handler:    _DirSync_GetChecksum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBlocks",
			Handler:       _DirSync_UploadBlocks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func (m *StructureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructureRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sep) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sep)))
		i += copy(dAtA[i:], m.Sep)
	}
	if len(m.Elements) > 0 {
		for _, msg := range m.Elements {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Element) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Element) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.IsDir {
		dAtA[i] = 0x10
		i++
		if m.IsDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StructureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructureResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChecksumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChecksumRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Checksum) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Checksum)))
		i += copy(dAtA[i:], m.Checksum)
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BlockSize))
	}
	return i, nil
}

func (m *ChecksumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChecksumResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Checksum) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Checksum)))
		i += copy(dAtA[i:], m.Checksum)
	}
	if len(m.Checksums) > 0 {
		for _, msg := range m.Checksums {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Checksum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checksum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Weak != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weak))
	}
	if len(m.Strong) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Strong)))
		i += copy(dAtA[i:], m.Strong)
	}
	return i, nil
}

func (m *UploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reference {
		dAtA[i] = 0x8
		i++
		if m.Reference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StructureRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sep)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Element) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsDir {
		n += 2
	}
	return n
}

func (m *StructureResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChecksumRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BlockSize != 0 {
		n += 1 + sovApi(uint64(m.BlockSize))
	}
	return n
}

func (m *ChecksumResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Checksums) > 0 {
		for _, e := range m.Checksums {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Checksum) Size() (n int) {
	var l int
	_ = l
	if m.Weak != 0 {
		n += 1 + sovApi(uint64(m.Weak))
	}
	l = len(m.Strong)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UploadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Block) Size() (n int) {
	var l int
	_ = l
	if m.Reference {
		n += 2
	}
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StructureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sep", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sep = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &Element{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Element) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Element: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Element: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChecksumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChecksumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChecksumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChecksumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChecksumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChecksumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksums = append(m.Checksums, &Checksum{})
			if err := m.Checksums[len(m.Checksums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Checksum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checksum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checksum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weak", wireType)
			}
			m.Weak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weak |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reference = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8f, 0x93, 0x40,
	0x14, 0xc7, 0x3b, 0x8b, 0x5b, 0xe0, 0xed, 0xb2, 0xb2, 0x63, 0x54, 0x96, 0x28, 0x21, 0x9c, 0x38,
	0x98, 0x9a, 0xac, 0xc6, 0x8b, 0xb7, 0xb5, 0x46, 0xcf, 0xd3, 0x18, 0x8f, 0x2b, 0x65, 0x9f, 0xee,
	0xa4, 0x2d, 0xe0, 0xcc, 0xa0, 0x69, 0xff, 0x0a, 0xff, 0x2c, 0x8f, 0x9e, 0x3c, 0x9b, 0xfa, 0x8f,
	0x18, 0x86, 0x61, 0x6a, 0x6a, 0x2f, 0x9e, 0x78, 0xbf, 0xf2, 0xf9, 0xbe, 0xf7, 0x05, 0xc0, 0x2f,
	0x1a, 0x3e, 0x69, 0x44, 0xad, 0x6a, 0xea, 0x4a, 0x14, 0x5f, 0x78, 0x89, 0x19, 0x83, 0x70, 0xa6,
	0x44, 0x5b, 0xaa, 0x56, 0x20, 0xc3, 0xcf, 0x2d, 0x4a, 0x45, 0x43, 0x70, 0x24, 0x36, 0x11, 0x49,
	0x49, 0xee, 0xb3, 0x2e, 0xa4, 0x4f, 0xc0, 0xc3, 0x25, 0xae, 0xb0, 0x52, 0x32, 0x3a, 0x4a, 0x9d,
	0xfc, 0xe4, 0x32, 0x9c, 0x18, 0xc2, 0xe4, 0x75, 0xdf, 0x60, 0x76, 0x22, 0x7b, 0x0e, 0xae, 0x29,
	0x52, 0x0a, 0x77, 0x9a, 0x42, 0xdd, 0x1a, 0x96, 0x8e, 0xe9, 0x7d, 0x18, 0x73, 0x79, 0x7d, 0xc3,
	0x45, 0x74, 0x94, 0x92, 0xdc, 0x63, 0xc7, 0x5c, 0x4e, 0xb9, 0xc8, 0xee, 0xc1, 0xf9, 0x5f, 0x9b,
	0xc8, 0xa6, 0xae, 0x24, 0x66, 0x1f, 0xe0, 0xee, 0xab, 0x5b, 0x2c, 0x17, 0xb2, 0x5d, 0x0d, 0xdb,
	0x1d, 0x42, 0xc6, 0xe0, 0x95, 0x66, 0x4c, 0x43, 0x7d, 0x66, 0x73, 0xfa, 0x18, 0x60, 0xbe, 0xac,
	0xcb, 0xc5, 0xb5, 0xe4, 0x1b, 0x8c, 0x9c, 0x94, 0xe4, 0x01, 0xf3, 0x75, 0x65, 0xc6, 0x37, 0x98,
	0x49, 0x08, 0x77, 0x0a, 0xbd, 0xea, 0x7f, 0x4b, 0x3c, 0x05, 0x7f, 0x88, 0x65, 0xe4, 0x68, 0x7f,
	0xce, 0xad, 0x3f, 0x96, 0xbe, 0x9b, 0xc9, 0x5e, 0x80, 0x37, 0x94, 0x3b, 0xb1, 0xaf, 0x58, 0x2c,
	0xb4, 0x58, 0xc0, 0x74, 0x4c, 0x1f, 0xc0, 0x58, 0x2a, 0x51, 0x57, 0x9f, 0x8c, 0x94, 0xc9, 0xb2,
	0x10, 0xce, 0xde, 0x35, 0xcb, 0xba, 0xb8, 0xb1, 0x06, 0xbd, 0x87, 0xe3, 0xab, 0xee, 0x16, 0xfa,
	0x08, 0x7c, 0x81, 0x1f, 0x51, 0x60, 0x55, 0xa2, 0x66, 0x79, 0x6c, 0x57, 0xe8, 0x80, 0x55, 0xbb,
	0x9a, 0x63, 0xef, 0x79, 0xc0, 0x4c, 0x46, 0x23, 0x70, 0x9b, 0x62, 0xdd, 0x11, 0xb5, 0x33, 0xa7,
	0x6c, 0x48, 0x2f, 0x7f, 0x12, 0x70, 0xa7, 0x5c, 0xcc, 0xd6, 0x55, 0x49, 0xdf, 0x42, 0xd0, 0x3d,
	0xed, 0xeb, 0xa1, 0x17, 0xf6, 0xba, 0xfd, 0x8f, 0x27, 0x8e, 0x0f, 0xb5, 0xcc, 0xb2, 0x23, 0x3a,
	0x85, 0x93, 0x37, 0xa8, 0xec, 0xed, 0xd1, 0xbf, 0x2e, 0x19, 0xcc, 0xc5, 0x81, 0x8e, 0xa5, 0xbc,
	0x84, 0xd3, 0xde, 0x06, 0x7d, 0xba, 0xa4, 0x67, 0x76, 0x58, 0x17, 0xe2, 0x87, 0x36, 0xdf, 0x73,
	0x6b, 0x94, 0x93, 0xab, 0xf0, 0xfb, 0x36, 0x21, 0x3f, 0xb6, 0x09, 0xf9, 0xb5, 0x4d, 0xc8, 0xb7,
	0xdf, 0xc9, 0x68, 0x3e, 0xd6, 0xff, 0xc4, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x1a,
	0x59, 0xf0, 0x20, 0x03, 0x00, 0x00,
}
